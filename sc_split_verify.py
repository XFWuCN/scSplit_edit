"""
Reference free AF-based demultiplexing on pooled scRNA-seq
Jon Xu (jun.xu@uq.edu.au)
Lachlan Coin
Aug 2018
"""

import vcf  # https://pyvcf.readthedocs.io/en/latest/INTRO.html
import numpy as np
import pandas as pd
from scipy.stats import binom
from scipy.sparse import csr_matrix
import datetime
import csv


def main():

    # input and output files
    ori_vcf = 'input8.vcf'        # original vcf file used in demuxlet run
    ref_csv = 'ref_filtered.csv'  # reference matrix
    alt_csv = 'alt_filtered.csv'  # alternative matrix
    psc_csv = 'P_s_c.csv'         # P(s|c) generated by sc_split
    dem_grp = 'g'                 # prefix of demuxlet assignments

    ref = pd.read_csv(ref_csv, header=0, index_col=0)
    alt = pd.read_csv(alt_csv, header=0, index_col=0)
    ref_s = csr_matrix(ref.values)
    alt_s = csr_matrix(alt.values)
    all_POS = ref.index

    # build matrix from scSplit assignment
    P_s_c = pd.read_csv(psc_csv, header=0, index_col=0)
    A_s_c = ((P_s_c >= 0.9) * 1).astype('float64')
    num = len(P_s_c.columns)  # number of samples + 1 doublet state
    err = 0.01  # error rate assumption
    # binomial simulation for genotype likelihood P(D|AA,RA,RR) with the alt count vs total count condition and (err, 0.5, 1-err) as allele probability
    rr_scsplit = pd.DataFrame(binom.pmf(pd.DataFrame(alt_s.dot(A_s_c)), pd.DataFrame((alt_s + ref_s).dot(A_s_c)), err), index=all_POS, columns=range(num)).drop(0,1).apply(np.log10)
    ra_scsplit = pd.DataFrame(binom.pmf(pd.DataFrame(alt_s.dot(A_s_c)), pd.DataFrame((alt_s + ref_s).dot(A_s_c)), 0.5), index=all_POS, columns=range(num)).drop(0,1).apply(np.log10)
    aa_scsplit = pd.DataFrame(binom.pmf(pd.DataFrame(alt_s.dot(A_s_c)), pd.DataFrame((alt_s + ref_s).dot(A_s_c)), 1-err), index=all_POS, columns=range(num)).drop(0,1).apply(np.log10)
    rr_scsplit = (rr_scsplit > 0.99) * 1
    ra_scsplit = (ra_scsplit > 0.99) * 1
    aa_scsplit = (aa_scsplit > 0.99) * 1
    scsplit = rr_scsplit + ra_scsplit + aa_scsplit
    
    # build matrix from demuxlet assignment
    dem_result = []
    rr_demuxlet = rr_scsplit.copy()
    ra_demuxlet = ra_scsplit.copy()
    aa_demuxlet = aa_scsplit.copy()    
    for n in range(1, num):
        for line in open(dem_grp, 'r'):
            dem_result.append(line.strip())  # barcodes for each sample
        rr_demuxlet[:, n] = binom.pmf(alt.loc[:,dem_result].sum(axis=1), (alt+ref).loc[:,dem_result].sum(axis=1), err).apply(np.log10)
        ra_demuxlet[:, n] = binom.pmf(alt.loc[:,dem_result].sum(axis=1), (alt+ref).loc[:,dem_result].sum(axis=1), 0.5).apply(np.log10)
        aa_demuxlet[:, n] = binom.pmf(alt.loc[:,dem_result].sum(axis=1), (alt+ref).loc[:,dem_result].sum(axis=1), 1-err).apply(np.log10)
    rr_demuxlet = (rr_demuxlet > 0.99) * 1
    ra_demuxlet = (ra_demuxlet > 0.99) * 1
    aa_demuxlet = (aa_demuxlet > 0.99) * 1
    demuxlet = rr_demuxlet + ra_demuxlet + aa_demuxlet

    # build matrix from original vcf
    vcf = rr_scsplit.copy()
    for record in vcf.Reader(open(ori_vcf, 'r')):
        for n in range (1, num):
            if max(record.samples[n-1]['GP']) > 0.99:
                vcf[record.CHROM + ':' + record.POS, n] = 1

    # output
    scsplit.to_csv('verify_scsplit.csv')
    demuxlet.to_csv('verify_demuxlet.csv')
    vcf.to_csv('verify_original.csv')

if __name__ == '__main__':
    main()
